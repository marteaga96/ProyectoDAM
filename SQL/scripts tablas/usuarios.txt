CREATE TABLE USUARIOS (
    ID_USUARIO INT PRIMARY KEY IDENTITY(1,1), -- ID autoincremental
    NOMBRE_SESION VARCHAR(15) NOT NULL UNIQUE, -- Tomado de la tabla de usuarios de SQL
    PASS_SESION VARBINARY(200),                -- Almacena la contraseña en formato hash
    NOMBRE_USUARIO VARCHAR(15),                -- Nombre del usuario
    APELLIDOS_USUARIO VARCHAR(25),             -- Apellido del usuario
    FECHA_NACIMIENTO VARCHAR(10),                     -- Cambiado a tipo DATE para almacenar fechas
    DEPARTAMENTO_USUARIO VARCHAR(20)           -- Departamento del usuario
);



--EL INT DEL ROL AÑADIRÁ PERMISOS AL USUARIO DE LA APP (niveles 0-5). EL ROL SERÁ NULL Y
CREATE TABLE ROLES (
    ID_USUARIO INT NOT NULL,                          -- Tomado de la tabla USUARIOS
    NOMBRE_SESION VARCHAR(15) NOT NULL,              -- Tomado de la tabla USUARIOS
    ROL INT,                                 -- Rol del usuario
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO), -- Relación con USUARIOS
    FOREIGN KEY (NOMBRE_SESION) REFERENCES USUARIOS(NOMBRE_SESION) -- Relación con USUARIOS
);




CREATE TABLE PROVEEDORES (
    ID_PROVEEDOR INT PRIMARY KEY IDENTITY(1,1), -- ID auto incremental
    DNI_O_CIF_PROVEEDOR VARCHAR(9) UNIQUE NOT NULL, -- DNI/CIF del proveedor
    NOMBRE_PROVEEDOR VARCHAR(25) NOT NULL,               -- Nombre del proveedor
    APELLIDOS_PROVEEDOR VARCHAR(25),            -- Apellidos del proveedor
    DIRECCION_PROVEEDOR VARCHAR(50) NOT NULL,            -- Dirección del proveedor
    EMAIL_PROVEEDOR VARCHAR(35) NOT NULL,                -- Email del proveedor
    TELEFONO_PROVEEDOR NVARCHAR(9) NOT NULL              -- Teléfono del proveedor
);



CREATE TABLE CLIENTES (
    ID_CLIENTE INT PRIMARY KEY IDENTITY(1,1), -- ID auto incremental
    DNI_CIF_CLIENTE VARCHAR(9) UNIQUE NOT NULL, -- DNI/CIF del cliente
    NOMBRE_CLIENTE VARCHAR(25) NOT NULL,        -- Nombre del cliente
    APELLIDOS_CLIENTE VARCHAR(25),              -- Apellidos del cliente
    EMAIL_CLIENTE VARCHAR(35) NOT NULL,         -- Email del cliente
    TELEFONO_CLIENTE NVARCHAR(9) NOT NULL,      -- Teléfono del cliente
    PAIS_CLIENTE VARCHAR(20) NOT NULL,			-- País cliente
    CIUDAD_CLIENTE VARCHAR(20) NOT NULL,		-- Ciudad del cliente
    POBLACION_CLIENTE VARCHAR(25) NOT NULL,		-- Poblacíon del cliente
    DIRECCION_CLIENTE VARCHAR(50) NOT NULL,     -- Dirección del cliente
	
);



CREATE TABLE PRODUCTOS (
    ID_PRODUCTO INT PRIMARY KEY IDENTITY(1,1), -- ID auto incremental
    NOMBRE_PRODUCTO VARCHAR(35) UNIQUE NOT NULL,      -- Nombre del producto
    PRECIO_SIN_IVA_PRODUCTO FLOAT NOT NULL,     -- Precio sin IVA del producto
    IVA_PRODUCTO FLOAT NOT NULL,                 -- IVA del producto
    PRECIO_TOTAL_PRODUCTO FLOAT         -- Precio total del producto

);


CREATE TABLE VENTAS (
    ID_VENTA INT PRIMARY KEY IDENTITY(1,1),      -- ID auto incremental
    VENDIDO_POR VARCHAR(50),    		 -- Usuario que ha hecho la venta
    NOMBRE_CLIENTE VARCHAR(25) NOT NULL,         -- Nombre del cliente (debe coincidir con ID_CLIENTE)
    NOMBRE_PRODUCTO VARCHAR(35) NOT NULL,        -- Nombre del producto (debe coincidir con ID_PRODUCTO)
    FECHA DATETIME DEFAULT GETDATE(),            -- Fecha de la compra
    CANTIDAD_VENDIDA FLOAT NOT NULL,      	 -- Cantidad comprada
);


CREATE TABLE ALMACEN (
    ID_PRODUCTO INT UNIQUE,
    NOMBRE_PRODUCTO VARCHAR(35) UNIQUE,
    STOCK FLOAT,
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO),  
);


CREATE TABLE COMPRAS (
    ID_COMPRA INT PRIMARY KEY IDENTITY(1,1),     -- ID auto incremental
    NOMBRE_PROVEEDOR VARCHAR(25) NOT NULL,       -- Nombre del proveedor (debe coincidir con ID_PROVEEDOR)
    NOMBRE_USUARIO VARCHAR(15),             	--Nombre del usuario
    NOMBRE_PRODUCTO VARCHAR(35) NOT NULL,        -- Nombre del producto (debe coincidir con ID_PRODUCTO)
    CANTIDAD_COMPRA_PRODUCTO FLOAT NOT NULL,      -- Cantidad comprada
    FECHA DATETIME DEFAULT GETDATE(),             -- Fecha de la compra
    FOREIGN KEY (NOMBRE_PROVEEDOR) REFERENCES PROVEEDORES(NOMBRE_PROVEEDOR),
    FOREIGN KEY (NOMBRE_USUARIO) REFERENCES USUARIOS(NOMBRE_SESION),  -- Relación con USUARIOS
    FOREIGN KEY (NOMBRE_PRODUCTO) REFERENCES PRODUCTOS(NOMBRE_PRODUCTO)      -- Relación con PRODUCTOS
);